{"version":3,"sources":["components/Navbar/Navbar.js","components/Card/Card.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["Navbar","props","className","text","score","highScore","Card","src","image","alt","id","onClick","clickMe","Wrapper","children","App","state","images","clicked","includes","setState","newClicked","shuffleImages","i","length","j","Math","floor","random","temp","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"2uHAgBeA,MAbf,SAAgBC,GACZ,OACI,6BACI,yBAAKC,UAAU,oBACX,oDACA,4BAAKD,EAAME,MACX,sCAAYF,EAAMG,MAAlB,gBAAsCH,EAAMI,c,MCO7CC,MAbf,SAAcL,GACV,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKK,IAAKN,EAAMO,MAAOC,IAAKR,EAAMS,GAAIC,QAAS,kBAAMV,EAAMW,QAAQX,EAAMS,W,MCM9EG,MAXf,SAAiBZ,GACb,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACVD,EAAMa,Y,OCkERC,G,iNAjEbC,MAAQ,CACNC,SACAb,MAAO,EACPC,UAAW,EACXa,QAAS,GACTf,KAAM,iB,EAKRS,QAAU,SAAAF,GACL,EAAKM,MAAME,QAAQC,SAAST,IAC7B,EAAKU,SAAS,CAACjB,KAAK,yBACjB,EAAKa,MAAMX,UAAY,EAAKW,MAAMZ,OACnC,EAAKgB,SAAS,CAACf,UAAW,EAAKW,MAAMZ,QAEvC,EAAKgB,SAAS,CAACF,QAAS,KACxB,EAAKE,SAAS,CAAChB,MAAO,MAGtB,EAAKgB,SAAS,CAACjB,KAAM,oBACrB,EAAKiB,SAAS,CAAChB,MAAO,EAAKY,MAAMZ,MAAQ,IACzC,EAAKgB,SAAS,CAACF,QAAQ,GAAD,mBAAM,EAAKF,MAAME,SAAjB,CAA0BR,OAGlD,IAAMW,EAAa,EAAKL,MAAMC,OAC9B,EAAKK,cAAcD,I,EAGrBC,cAAgB,SAAAD,GACd,IAAI,IAAIE,EAAIF,EAAWG,OAAQ,EAAGD,EAAI,EAAGA,IAAI,CAC3C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAG,IACnCM,EAAOR,EAAWE,GACxBF,EAAWE,GAAKF,EAAWI,GAC3BJ,EAAWI,GAAKI,I,wEAIV,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACE1B,KAAM2B,KAAKd,MAAMb,KACjBC,MAAO0B,KAAKd,MAAMZ,MAClBC,UAAWyB,KAAKd,MAAMX,YACxB,yBAAKH,UAAU,yBACb,oDACA,+GACA,kBAAC,EAAD,KACG4B,KAAKd,MAAMC,OAAOc,KAAI,SAAAvB,GAAK,OAC1B,kBAAC,EAAD,CACEE,GAAIF,EAAME,GACVsB,IAAKxB,EAAME,GACXF,MAAOA,EAAMA,MACbI,QAAS,EAAKA,oB,GAvDZqB,cCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b9a82acc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\"\n\nfunction Navbar(props){\n    return(\n        <div>\n            <nav className=\"navbar fixed-top\">\n                <h4>Bachelor Clicky Game</h4>\n                <h4>{props.text}</h4>\n                <h4>Score: {props.score} | Top Score {props.highScore}</h4>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./card.css\"\n\nfunction Card(props){\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-1\">\n                <div className=\"card\">\n                    <img src={props.image} alt={props.id} onClick={() => props.clickMe(props.id)}/>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Card;","import React from \"react\";\nimport \"./wrapper.css\"\n\nfunction Wrapper(props){\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport images from \"./images.json\"\nimport \"./App.css\"\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    clicked: [],\n    text: \"Take a Guess!\"\n  }\n\n \n\n  clickMe = id => {\n    if(this.state.clicked.includes(id)){\n      this.setState({text:\"You got sent home :(\"})\n      if(this.state.highScore < this.state.score){\n        this.setState({highScore: this.state.score})\n      };\n      this.setState({clicked: []})\n      this.setState({score: 0})\n    }\n    else{\n      this.setState({text: \"You got a rose!\"})\n      this.setState({score: this.state.score + 1})\n      this.setState({clicked: [...this.state.clicked, id]})\n    };\n\n    const newClicked = this.state.images\n    this.shuffleImages(newClicked)\n\n  };\n  shuffleImages = newClicked => {\n    for(var i = newClicked.length -1; i > 0; i--){\n      const j = Math.floor(Math.random() * (i +1))\n      const temp = newClicked[i];\n      newClicked[i] = newClicked[j]\n      newClicked[j] = temp\n    };\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          text={this.state.text}\n          score={this.state.score}\n          highScore={this.state.highScore} />\n        <div className=\"jumbotron text-center\">\n          <h1>Bachelor Clicky Game</h1>\n          <p>Click on image for 1 point but be careful and don't click on one more than once!</p>\n          <Wrapper>\n            {this.state.images.map(image => (\n              <Card\n                id={image.id}\n                key={image.id}\n                image={image.image}\n                clickMe={this.clickMe}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}